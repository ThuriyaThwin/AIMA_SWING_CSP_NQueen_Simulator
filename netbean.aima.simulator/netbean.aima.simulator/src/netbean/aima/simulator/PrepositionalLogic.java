/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package netbean.aima.simulator;

import aima.core.logic.propositional.algorithms.KnowledgeBase;
import aima.core.logic.propositional.algorithms.PLResolution;
import java.util.List;
import java.util.Set;
import lab6.Logic.UseCNFConverter;
import lab6.Logic.UsePreposition;

/**
 *
 * @author mr.vdiep
 */
public class PrepositionalLogic extends javax.swing.JFrame {

    /**
     * Creates new form PrepositionalLogic
     */
    public PrepositionalLogic() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Use Preposition & CNF Converter");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("A => (D ^ F)\nB => (C v E)\n(E ^ F) => H\nA\nB\n-C");
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 204));
        jLabel1.setText("Use Preposition & CNF Converter");

        jButton1.setText("Convert");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setText("....");

        jLabel3.setText("...");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(0, 0, 0))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(0, 0, 0))
        );

        jScrollPane2.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jButton1))
                        .addGap(0, 452, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        String content_html = "<html><H2>Convert Sentences to Conjunctive Normal Form</H2>\n" + //
                "<table border=\"0\">\n" + //
                "  <tr bgcolor=\"#5BC5FA\">\n" + //
                "    <th >Sentences </th>\n" + //
                "    <th  >CNF</th>\n" + //
                "  </tr>"; //

        // Create a knowledge base
        KnowledgeBase kb = new KnowledgeBase();
        // Create a Resolution-based prover
        PLResolution prover = new PLResolution();

        List<String> setKB = UsePreposition.getKB(jTextArea1.getText());
        int counter_logic1 = 1;
        int count_cnf = 1;

        System.out.println("---------CNF --------------------");
        for (String k : setKB) {
            Set<String> cnf = UseCNFConverter.getCNF(k);
            int index = 0;
            for (String c : cnf) {
                System.out.println(count_cnf + ". " + UseCNFConverter.toNatural(c));
                if (index++ == 0) {
                    content_html += "\n" + "<tr bgcolor=\"#BFE6FE\">";
                    content_html += "\n" + " <td bgcolor=\"#FAB4B4\">" + (counter_logic1 + ". " + k) + "</td> ";
                    content_html += "\n" + " <td>" + (count_cnf + ". " + UseCNFConverter.toNatural(c)) + "</td>";
                    content_html += "\n" + "</tr>";
                } else {

                    content_html += "\n" + "<tr bgcolor=\"#BFE6FE\">";
                    content_html += "\n" + " <td bgcolor=\"#FFFFFF\"></td> ";
                    content_html += "\n" + " <td>" + (count_cnf + ". " + UseCNFConverter.toNatural(c)) + "</td>";
                    content_html += "\n" + "</tr>";
                }
                count_cnf++;
            }
            kb.tell(k);
            counter_logic1++;
        }
        // Declare the sentence, called 'conclusion',
        // that you want to infer from the knowledge base

        content_html += "</table></html>";


        jLabel2.setText(content_html);

        String content_html2 = "<html><H2>Result</H2>\n" + //
                "<table border=\"0\">\n" + //
                "  <tr bgcolor=\"#5BC5FA\">\n" + //
                "    <th >Conclusion </th>\n" + //
                "    <th  >CAN infer conclusion from the knowledge base</th>\n" + //
                "  </tr>"; //
        String pattern = "ABCDEFGHIJKLMNOPQRSTUWXYZ";
        for (int i = 0; i < pattern.length(); i++) {
            String valueOfString = String.valueOf(pattern.charAt(i));
            if (jTextArea1.getText().contains(valueOfString)) {
                String conclusion = "(" + valueOfString + ")";
                // Prove the conclusion
                boolean result = prover.plResolution(kb, conclusion);

                // Print the result:
                // Result : TRUE = found a CONTRADITION
                // Result : FALSE = COULD NOT find a CONTRADITION

                content_html2 += "\n" + "<tr bgcolor=\"#BFE6FE\">";
                content_html2 += "\n" + " <td bgcolor=\"#FAB4B4\">" + (conclusion) + "</td> ";
                content_html2 += "\n" + " <td " + (result ? ">CAN" : " bgcolor=\"#FAB4B4\" >NOT") + "</td>";
                content_html2 += "\n" + "</tr>";

                if (result) {
                    System.out.println("We CAN infer  " + conclusion + " from the knowledge base");
                } else {
                    System.out.println("We CANNOT infer " + conclusion + " from the knowledge base");
                }
            }
        }
        content_html += "</table></html>";
        jLabel3.setText(content_html2);

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrepositionalLogic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrepositionalLogic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrepositionalLogic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrepositionalLogic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PrepositionalLogic().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
